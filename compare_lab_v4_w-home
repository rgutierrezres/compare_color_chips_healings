#!/usr/bin/env python3
import csv
import os
import sys
import argparse
import math
import itertools

# try to import tkinter for file dialogs
try:
    import tkinter as tk
    from tkinter import filedialog
except ImportError:
    tk = None


def browse_multiple_files():
    """
    Pop up a GUI to select 2+ .lab/.txt files.
    """
    if not tk:
        print("ERROR: tkinter not available for file browsing.", file=sys.stderr)
        sys.exit(1)
    root = tk.Tk()
    root.withdraw()
    paths = filedialog.askopenfilenames(
        title="Select Barbieri .lab/.txt files (select 2 or more, including your Home)",
        filetypes=[("Lab files", "*.lab *.txt"), ("All files", "*.*")]
    )
    if not paths or len(paths) < 2:
        print("ERROR: Please select at least two files.", file=sys.stderr)
        sys.exit(1)
    return list(paths)


def ask_save_path(default_name):
    """
    If tkinter available, ask user where to save CSV; otherwise prompt CLI input.
    """
    if tk:
        root = tk.Tk()
        root.withdraw()
        save_path = filedialog.asksaveasfilename(
            title="Select output CSV file location",
            defaultextension='.csv',
            initialfile=default_name,
            filetypes=[('CSV files','*.csv'), ('All files','*.*')]
        )
        if save_path:
            return save_path
        print("No save path selected; exiting.", file=sys.stderr)
        sys.exit(1)
    else:
        print(f"Enter output CSV path (default: {default_name}):", end=' ')
        choice = input().strip()
        return choice or default_name


def read_lab_file(path):
    """
    Reads a Barbieri .lab or .txt file and returns list of (Sample_ID, Chip Coord, L, A, B).
    """
    data = []
    if not os.path.isfile(path):
        print(f"ERROR: Input file not found: {path}", file=sys.stderr)
        sys.exit(1)
    with open(path, 'r', encoding='utf-8') as f:
        in_data = False
        for raw in f:
            line = raw.strip()
            if line == 'BEGIN_DATA': in_data = True; continue
            if line == 'END_DATA': break
            if not in_data or not line: continue
            parts = line.split()
            if len(parts) < 5: continue
            sid, name, lval, aval, bval = parts[:5]
            coord = ",".join(list(name))
            try:
                L, A, B = map(float, (lval, aval, bval))
            except ValueError:
                print(f"WARNING: Skipping non-numeric line: {line}", file=sys.stderr)
                continue
            data.append((sid, coord, L, A, B))
    return data


def generate_nonref_comparisons(targets, data_map, writer, summaries):
    """
    Compare all non-Home files pairwise, write rows, collect summary metrics.
    summaries: dict to accumulate global stats for non-Home comparisons.
    """
    pairs = list(itertools.combinations(targets, 2))
    for a, b in pairs:
        a_data = data_map[a]
        b_dict = {(s, c): (L, A, B) for s, c, L, A, B in data_map[b]}
        deltas = []
        gt3 = gt6 = 0
        for sid, coord, La, Aa, Ba in a_data:
            key = (sid, coord)
            if key not in b_dict:
                continue
            Lb, Ab, Bb = b_dict[key]
            dL, dA, dB = Lb - La, Ab - Aa, Bb - Ba
            dE = math.sqrt(dL**2 + dA**2 + dB**2)
            deltas.append((dL, dA, dB, dE))
            if dE > 3: gt3 += 1
            if dE > 6: gt6 += 1
            writer.writerow([
                os.path.basename(a), os.path.basename(b), sid, coord,
                f"{La:.6f}", f"{Aa:.6f}", f"{Ba:.6f}",
                f"{Lb:.6f}", f"{Ab:.6f}", f"{Bb:.6f}",
                f"{dL:.6f}", f"{dA:.6f}", f"{dB:.6f}", f"{dE:.6f}"
            ])
        if deltas:
            n = len(deltas)
            avg_vals = [sum(v[i] for v in deltas) / n for i in range(4)]
            summaries['nonhome_avgs'].append(avg_vals)
            summaries['nonhome_gt3'] += gt3
            summaries['nonhome_gt6'] += gt6
            summaries['nonhome_total'] += n
            writer.writerow([])
            writer.writerow([
                f"Summary {os.path.basename(a)} vs {os.path.basename(b)}"
            ] + ['']*8 +
                             [f"Avg ΔL: {avg_vals[0]:.6f}", f"Avg ΔA: {avg_vals[1]:.6f}",
                              f"Avg ΔB: {avg_vals[2]:.6f}", f"Avg ΔE: {avg_vals[3]:.6f}"])
            writer.writerow(['', '', f"ΔE>3: {gt3}", f"ΔE>6: {gt6}"])
            writer.writerow([])


def generate_home_comparisons(home, targets, data_map, writer, summaries):
    """
    Compare home file vs each target, write rows, collect summary metrics.
    summaries: dict to accumulate global stats for home comparisons.
    """
    home_data = read_lab_file(home)
    for tar in targets:
        tar_dict = {(s, c): (L, A, B) for s, c, L, A, B in data_map[tar]}
        deltas = []
        gt3 = gt6 = 0
        for sid, coord, Lh, Ah, Bh in home_data:
            key = (sid, coord)
            if key not in tar_dict:
                continue
            Lt, At, Bt = tar_dict[key]
            dL, dA, dB = Lt - Lh, At - Ah, Bt - Bh
            dE = math.sqrt(dL**2 + dA**2 + dB**2)
            deltas.append((dL, dA, dB, dE))
            if dE > 3: gt3 += 1
            if dE > 6: gt6 += 1
            writer.writerow([
                os.path.basename(home), os.path.basename(tar),
                sid, coord,
                f"{Lh:.6f}", f"{Ah:.6f}", f"{Bh:.6f}",
                f"{Lt:.6f}", f"{At:.6f}", f"{Bt:.6f}",
                f"{dL:.6f}", f"{dA:.6f}", f"{dB:.6f}", f"{dE:.6f}"
            ])
        if deltas:
            n = len(deltas)
            avg_vals = [sum(v[i] for v in deltas) / n for i in range(4)]
            summaries['home_avgs'].append(avg_vals)
            summaries['home_gt3'] += gt3
            summaries['home_gt6'] += gt6
            summaries['home_total'] += n
            writer.writerow([])
            writer.writerow([
                f"Summary Home vs {os.path.basename(tar)}"
            ] + ['']*8 +
                             [f"Avg ΔL: {avg_vals[0]:.6f}", f"Avg ΔA: {avg_vals[1]:.6f}",
                              f"Avg ΔB: {avg_vals[2]:.6f}", f"Avg ΔE: {avg_vals[3]:.6f}"])
            writer.writerow(['', '', f"ΔE>3: {gt3}", f"ΔE>6: {gt6}"])
            writer.writerow([])


def write_global_summaries(writer, summaries):
    # Non-home
    writer.writerow([])
    writer.writerow(['Global Summary: Non-home comparisons'])
    if summaries['nonhome_avgs']:
        m = len(summaries['nonhome_avgs'])
        avg_nonhome = [sum(vals[i] for vals in summaries['nonhome_avgs']) / m for i in range(4)]
        pct3 = (summaries['nonhome_gt3'] / summaries['nonhome_total'] * 100) if summaries['nonhome_total'] else 0
        pct6 = (summaries['nonhome_gt6'] / summaries['nonhome_total'] * 100) if summaries['nonhome_total'] else 0
        writer.writerow([
            f"Avg of averages ΔL: {avg_nonhome[0]:.6f}", f"ΔA: {avg_nonhome[1]:.6f}",
            f"ΔB: {avg_nonhome[2]:.6f}", f"ΔE: {avg_nonhome[3]:.6f}"
        ])
        writer.writerow([f"Sum ΔE>3: {summaries['nonhome_gt3']}", f"Sum ΔE>6: {summaries['nonhome_gt6']}"])
        writer.writerow([f"Pct ΔE>3: {pct3:.2f}%", f"Pct ΔE>6: {pct6:.2f}%"])  
    else:
        writer.writerow(["No non-home comparisons."])
    # Home
    writer.writerow([])
    writer.writerow(['Global Summary: Home comparisons'])
    if summaries['home_avgs']:
        m2 = len(summaries['home_avgs'])
        avg_home = [sum(vals[i] for vals in summaries['home_avgs']) / m2 for i in range(4)]
        pct3r = (summaries['home_gt3'] / summaries['home_total'] * 100) if summaries['home_total'] else 0
        pct6r = (summaries['home_gt6'] / summaries['home_total'] * 100) if summaries['home_total'] else 0
        writer.writerow([
            f"Avg of averages ΔL: {avg_home[0]:.6f}", f"ΔA: {avg_home[1]:.6f}",
            f"ΔB: {avg_home[2]:.6f}", f"ΔE: {avg_home[3]:.6f}"
        ])
        writer.writerow([f"Sum ΔE>3: {summaries['home_gt3']}", f"Sum ΔE>6: {summaries['home_gt6']}"])
        writer.writerow([f"Pct ΔE>3: {pct3r:.2f}%", f"Pct ΔE>6: {pct6r:.2f}%"])  
    else:
        writer.writerow(["No home comparisons."])


def main():
    files = browse_multiple_files()
    print("\nSelected files:")
    for i, path in enumerate(files, 1):
        print(f"  [{i}] {os.path.basename(path)}")
    choice = input("Enter the number of the Home file: ").strip()
    try:
        idx = int(choice) - 1
        if idx < 0 or idx >= len(files): raise ValueError
    except ValueError:
        print("Invalid selection; exiting.", file=sys.stderr)
        sys.exit(1)
    home = files.pop(idx)
    targets = files

    default_name = "comparison_summary.csv"
    out_csv = ask_save_path(default_name)

    data_map = {path: read_lab_file(path) for path in targets}
    summaries = {
        'nonhome_avgs': [], 'nonhome_gt3': 0, 'nonhome_gt6': 0, 'nonhome_total': 0,
        'home_avgs': [], 'home_gt3': 0, 'home_gt6': 0, 'home_total': 0
    }

    try:
        with open(out_csv, 'w', newline='', encoding='utf-8') as out:
            writer = csv.writer(out)
            writer.writerow(['Home','Target','Sample_ID','Chip Coordinate',
                             'Home L','Home A','Home B','Tar L','Tar A','Tar B',
                             'ΔL','ΔA','ΔB','ΔE'])
            generate_nonref_comparisons(targets, data_map, writer, summaries)
            generate_home_comparisons(home, targets, data_map, writer, summaries)
            write_global_summaries(writer, summaries)
    except PermissionError:
        print(f"Permission denied writing to '{out_csv}'. Please choose a different path.", file=sys.stderr)
        out_csv = ask_save_path(default_name)
        with open(out_csv, 'w', newline='', encoding='utf-8') as out:
            writer = csv.writer(out)
            writer.writerow(['Home','Target','Sample_ID','Chip Coordinate',
                             'Home L','Home A','Home B','Tar L','Tar A','Tar B',
                             'ΔL','ΔA','ΔB','ΔE'])
            generate_nonref_comparisons(targets, data_map, writer, summaries)
            generate_home_comparisons(home, targets, data_map, writer, summaries)
            write_global_summaries(writer, summaries)

    print(f"✅ Wrote full comparison CSV: {out_csv}")

if __name__ == '__main__':
    main()
